<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Epsylon.UberFactory.Themes"
                    xmlns:prjitems="clr-namespace:Epsylon.UberFactory.Themes.ProjectItems"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:code="clr-namespace:Epsylon.UberFactory">

    <!-- http://michaelscodingspot.com/2017/01/01/wpf-merged-dictionary-problemsandsolutions/ -->

    <!-- http://xahlee.info/comp/unicode_crosses.html -->

    <sys:String x:Key="_NewIcon">✨</sys:String>
    <!-- ✳✴❇🆕-->
    <sys:String x:Key="_AddIcon">➕</sys:String>

    <sys:String x:Key="_RemoveIcon">❌</sys:String>
    <sys:String x:Key="_TrashIcon">🗑</sys:String>

    <sys:String x:Key="_ResetIcon">❌</sys:String>
    <!-- ⭕ ⬜ 🔲 🔳 ⚪ ⚫ ❎⛝ -->
    <sys:String x:Key="_EmptyIcon">❎</sys:String>

    <sys:String x:Key="_InspectIcon">🔎</sys:String>

    <sys:String x:Key="_FolderIcon">📁</sys:String>
    <sys:String x:Key="_OpenIcon">📂</sys:String>

    <sys:String x:Key="_EditIcon">✎</sys:String>

    <sys:String x:Key="_SaveIcon">💾</sys:String>
    <sys:String x:Key="_ExitIcon">❎</sys:String>
    <sys:String x:Key="_ConfigurationsIcon">🗃</sys:String>
    <sys:String x:Key="_PluginsIcon">🔌</sys:String>
    <sys:String x:Key="_TestIcon">▷</sys:String>
    <sys:String x:Key="_BuildIcon">▶</sys:String>
    <sys:String x:Key="_AboutIcon">❓</sys:String>
    <sys:String x:Key="_BooksIcon">📚</sys:String>
    <sys:String x:Key="_PackageIcon">📦</sys:String>
    <sys:String x:Key="_OutboxTray">📤</sys:String>
    <sys:String x:Key="_InboxTray">📥</sys:String>


    <!--▲△ ▼▽-->
    <sys:String x:Key="_ExpanderExpand">▼</sys:String>
    <sys:String x:Key="_ExpanderContract">△</sys:String>
    
    <!-- ========================================================================================================================= -->

    <BooleanToVisibilityConverter x:Key="__isVisible" />
    <BooleanToVisibilityConverter x:Key="asVisible" />
    <local:FilePathConverter x:Key="asFilePath" />
    <local:TypeDisplayNameConverter x:Key="_AsDisplayName" />
    <local:RelayCommandConverter x:Key="__asRelayCommand" />
    <local:BooleanToTextWrappingConverter x:Key="__asTextWrapping" />
    <local:ConvertibleToBrushConverter x:Key="__AsColorBrush" FalseBrush="Gray" TrueBrush="DarkSlateBlue" />

    <!-- ========================================================================================================================= -->

    <Style x:Key="GroupBorderBaseStyle" TargetType="{x:Type Border}">
        <Setter Property="Margin" Value="1" />
        <Setter Property="Padding" Value="4,1,4,1" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="CornerRadius" Value="4" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="BorderBrush" Value="Black" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <Style x:Key="GroupBorderUpStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource GroupBorderBaseStyle}">
        <Setter Property="Margin" Value="1,1,1,0" />
        <Setter Property="CornerRadius" Value="4,4,0,0" />
        <Setter Property="Background" Value="AliceBlue" />
    </Style>

    <Style x:Key="GroupBorderDownStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource GroupBorderBaseStyle}">
        <Setter Property="Margin" Value="1,0,1,1" />
        <Setter Property="CornerRadius" Value="0,0,4,4" />
        <Setter Property="BorderThickness" Value="1,0,1,1" />
    </Style>

    <Style x:Key="GroupBorderLeftStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource GroupBorderBaseStyle}">
        <Setter Property="Margin" Value="1,1,0,1" />
        <Setter Property="CornerRadius" Value="4,0,0,4" />
        <Setter Property="Background" Value="AliceBlue" />
    </Style>

    <Style x:Key="GroupBorderRightStyle" TargetType="{x:Type Border}" BasedOn="{StaticResource GroupBorderBaseStyle}">
        <Setter Property="Margin" Value="0,1,1,1" />
        <Setter Property="CornerRadius" Value="0,4,4,0" />
        <Setter Property="BorderThickness" Value="0,1,1,1" />
    </Style>





    <Style x:Key="PlainTextGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <DockPanel SnapsToDevicePixels="True">

                        <ContentPresenter DockPanel.Dock="Top" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,8,0,0" />

                        <ContentPresenter x:Name="Content"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}" />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BasicGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Background" Value="White" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Border Style="{StaticResource GroupBorderBaseStyle}" Background="{TemplateBinding Background}" >
                        <DockPanel SnapsToDevicePixels="True">

                            <ContentPresenter DockPanel.Dock="Top" Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />

                            <ContentPresenter x:Name="Content"
                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}" />
                        </DockPanel>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="VerticalGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Background" Value="White" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <DockPanel SnapsToDevicePixels="True">

                        <Border Style="{StaticResource GroupBorderUpStyle}" DockPanel.Dock="Top">
                            <ContentPresenter Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Border>

                        <Border Style="{StaticResource GroupBorderDownStyle}" Background="{TemplateBinding Background}" >

                            <ContentPresenter x:Name="Content"
                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}" />
                        </Border>

                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HorizontalGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="Background" Value="White" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <DockPanel SnapsToDevicePixels="True">

                        <Border Style="{StaticResource GroupBorderLeftStyle}" DockPanel.Dock="Left">
                            <ContentPresenter Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Border>

                        <Border Style="{StaticResource GroupBorderRightStyle}" Background="{TemplateBinding Background}" >

                            <ContentPresenter x:Name="Content"
                                      ContentTemplate="{TemplateBinding ContentTemplate}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      Margin="{TemplateBinding Padding}" />
                        </Border>

                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ExpanderToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Content" Value="{StaticResource _ExpanderExpand}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- https://msdn.microsoft.com/fr-fr/library/cc296245(v=vs.95).aspx -->
                <ControlTemplate TargetType="{x:Type ToggleButton}">

                    <ContentPresenter x:Name="contentPresenter"
                                                          Content="{TemplateBinding Content}"
                                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                          Margin="{TemplateBinding Padding}" />

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="contentPresenter" Property="Content" Value="{StaticResource _ExpanderContract}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>

    <Style x:Key="VerticalExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Background" Value="White" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate  TargetType="{x:Type Expander}">
                    <!-- https://www.codeproject.com/articles/248112/templating-wpf-expander-control -->

                    <DockPanel SnapsToDevicePixels="True">

                        <Border Style="{StaticResource GroupBorderUpStyle}" DockPanel.Dock="Top">
                            <ContentPresenter Content="{TemplateBinding Header}" ContentTemplate="{TemplateBinding HeaderTemplate}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </Border>

                        <Border Style="{StaticResource GroupBorderDownStyle}" Background="{TemplateBinding Background}" >
                            <DockPanel>

                                <ToggleButton DockPanel.Dock="Bottom" x:Name="ExpanderButton" Style="{StaticResource ExpanderToggleButtonStyle}"
                                              HorizontalContentAlignment="Center" HorizontalAlignment="Stretch"
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}">
                                </ToggleButton>

                                <ContentPresenter x:Name="ExpanderContent"
                                              Visibility="Collapsed"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}" 
                                              />
                            </DockPanel>
                        </Border>

                    </DockPanel>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderContent" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>




    <Style x:Key="LinkButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock TextDecorations="Underline">
                        <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Blue" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ClearButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">

                    <Border x:Name="border" Padding="4" Margin="1" CornerRadius="0" Background="Transparent">
                        <ContentPresenter />
                    </Border>


                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="LightBlue" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>
        </Setter>
        <Setter Property="Cursor" Value="Hand" />

    </Style>

    <Style x:Key="ClearGroupBoxStyle" TargetType="{x:Type GroupBox}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <DockPanel SnapsToDevicePixels="True">

                        <TextBlock FontSize="21" DockPanel.Dock="Top" Margin="8,4,8,2">
                            <ContentPresenter Content="{TemplateBinding Header}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
                        </TextBlock>

                        <ContentPresenter x:Name="Content"
                                    ContentTemplate="{TemplateBinding ContentTemplate}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    Margin="{TemplateBinding Padding}" />

                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!-- ========================================================================================================================= -->

    <sys:String x:Key="L2N_SetNewReference">Set New Value</sys:String>
    <sys:String x:Key="L2N_SetNullReference">Set Empty Value</sys:String>
    <sys:String x:Key="L2N_SetDefaultReference">Remove Value</sys:String>
    <sys:String x:Key="L2N_PreviewResult">Preview Result</sys:String>

    <!-- these datatemplates should bind objects compatible with IChildEditCommands -->    

    <DataTemplate x:Key="Header_EmptyChild">
        <DockPanel HorizontalAlignment="Stretch">

            <DockPanel.ContextMenu>
                <ContextMenu>
                    <MenuItem Icon="{StaticResource _AddIcon}"    Header="{StaticResource L2N_SetNewReference}"     Command="{Binding ChooseParameterCmd}" />
                    <MenuItem Icon="{StaticResource _RemoveIcon}" Header="{StaticResource L2N_SetDefaultReference}" Command="{Binding SetParameterDefaultValueCmd}" Visibility="{Binding IsChildConfiguration,Converter={StaticResource asVisible}}" />
                </ContextMenu>
            </DockPanel.ContextMenu>

            <TextBlock Text="{Binding DisplayName}" FontWeight="Bold" HorizontalAlignment="Left" />

            <!-- this one is used to stretch the dockpanel along the whole header -->
            <TextBlock Text="" HorizontalAlignment="Right" />

        </DockPanel>
    </DataTemplate>    

    <DataTemplate x:Key="Header_InstancedChild">
        <DockPanel HorizontalAlignment="Stretch">
            <DockPanel.ContextMenu>
                <prjitems:ChildEditMenu />
            </DockPanel.ContextMenu>
            <TextBlock Text="{Binding DisplayName}" FontWeight="Bold" />
            <prjitems:ChildEditBar DockPanel.Dock="Right" />
            <TextBlock Text="    " />
        </DockPanel>
    </DataTemplate>

    <DataTemplate x:Key="Header_ChildCollection">
        <DockPanel HorizontalAlignment="Stretch">
            <DockPanel.ContextMenu>
                <ContextMenu>
                    <MenuItem Icon="{StaticResource _AddIcon}" Header="Add new child" Command="{Binding AddParameterSlotCmd}" />
                </ContextMenu>
            </DockPanel.ContextMenu>
            <TextBlock Text="{Binding DisplayName}" FontWeight="Bold" />
            <Button Content="{StaticResource _AddIcon}" Command="{Binding AddParameterSlotCmd}" DockPanel.Dock="Right" ToolTip="{StaticResource L2N_SetNewReference}"/>
            <TextBlock Text="    " />
        </DockPanel>
    </DataTemplate>

    <!-- ========================================================================================================================= -->    


</ResourceDictionary>